<?php
 namespace Imagine\Image; use Imagine\Exception\InvalidArgumentException; final class Color { private $r; private $g; private $b; private $alpha; public function __construct($color, $alpha = 0) { $this->setColor($color); $this->setAlpha($alpha); } public function getRed() { return $this->r; } public function getGreen() { return $this->g; } public function getBlue() { return $this->b; } public function getAlpha() { return $this->alpha; } public function dissolve($alpha) { return new Color((string) $this, $this->alpha + $alpha); } public function lighten($shade) { return new Color( array( min(255, $this->r + $shade), min(255, $this->g + $shade), min(255, $this->b + $shade), ), $this->alpha ); } public function darken($shade) { return new Color( array( max(0, $this->r - $shade), max(0, $this->g - $shade), max(0, $this->b - $shade), ), $this->alpha ); } private function setAlpha($alpha) { if (!is_int($alpha) || $alpha < 0 || $alpha > 100) { throw new InvalidArgumentException(sprintf( 'Alpha must be an integer between 0 and 100, %s given', $alpha )); } $this->alpha = $alpha; } private function setColor($color) { if (!is_string($color) && !is_array($color) && !is_int($color)) { throw new InvalidArgumentException(sprintf( 'Color must be specified as a hexadecimal string, array '. 'or integer, %s given', gettype($color) )); } if (is_array($color) && count($color) !== 3) { throw new InvalidArgumentException( 'Color argument if array, must look like array(R, G, B), '. 'where R, G, B are the integer values between 0 and 255 for '. 'red, green and blue color indexes accordingly' ); } if (is_string($color)) { $color = ltrim($color, '#'); if (strlen($color) !== 3 && strlen($color) !== 6) { throw new InvalidArgumentException(sprintf( 'Color must be a hex value in regular (6 characters) or '. 'short (3 characters) notation, "%s" given', $color )); } if (strlen($color) === 3) { $color = $color[0].$color[0]. $color[1].$color[1]. $color[2].$color[2]; } $color = array_map('hexdec', str_split($color, 2)); } if (is_int($color)) { $color = array( 255 & ($color >> 16), 255 & ($color >> 8), 255 & $color ); } list($this->r, $this->g, $this->b) = array_values($color); } public function __toString() { return sprintf('#%02x%02x%02x', $this->r, $this->g, $this->b); } public function isOpaque() { return 0 === $this->alpha; } } 